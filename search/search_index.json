{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview of BigBlueButton Exporter","text":"<p>BigBlueButton Exporter is a Prometheus exporter for BigBlueButton. On a HTTP <code>/metrics</code> request, the exporter will query the BigBlueButton's API for data which it then aggregates and exposes as metrics.</p> <p> </p> <p>Metrics exposed:</p> <ul> <li>Number of participants by type (listeners, voice, video)</li> <li>Number of participants by client (HTML5, dial-in, flash)</li> <li>Number of recordings (processing, published, unpublished, deleted, unprocessed)</li> <li>Number of participants in rooms by bucket</li> </ul>"},{"location":"#use-case","title":"Use Case","text":"<p>BigBlueButton Exporter is the bridge between BigBlueButton and modern monitoring infrastructure such as Prometheus, Alertmanager &amp; Grafana.</p> <p>Using BigBlueButton Exporter you can create stunning dashboards for your BigBlueButton infrastructure and create alert rules when certain things happen.</p>"},{"location":"#multiple-bigbluebutton-servers-dashboard","title":"Multiple BigBlueButton servers dashboard","text":"<p>With this dashboard you have a quick overlook over all your BigBlueButton servers and quickly spot anomalies.</p> <p></p>"},{"location":"#single-detailed-bigbluebutton-server-dashboard","title":"Single detailed BigBlueButton server dashboard:","text":"<p>This dashboard gives you details about a single BigBlueButton server and it's performance compared to it's resources (CPU utilization and network bandwidth).</p> <p></p> <p>Note</p> <p>Additional software is required to display server resources i.e. node_exporter or Netdata. We cover this in the installation instructions.</p>"},{"location":"debugging/","title":"Debugging","text":"<p>You might encounter some strange or unexpected metrics from your BigBlueButton server(s). In order to properly debug the issue it is crucial to figure out where the issue lies; in the monitoring infrastructure (BigBlueButton Exporter, Prometheus, Grafana, node_exporter,  Netdata, etc.) or in the BigBlueButton infrastructure.</p>"},{"location":"debugging/#debugging-faulty-metrics","title":"Debugging Faulty Metrics","text":"<p>If you suspect there is an issue within BigBlueButton Exporter or the accompanied Grafana  dashboards you can run the exporter in debug mode and view the XML API response the  exporter fetches from BigBlueButton. If the \"faulty\" metric is contained within the XML API response then the issue lies with BigBlueButton, otherwise the issue lies within the monitoring stack (BigBlueButton Exporter,  Prometheus, Grafana, node_exporter, Netdata, etc.).</p> <p>You can turn on debugging mode, as specified in the  Exporter User Guide, by adding the  environment variable <code>DEBUG=true</code>. This should spit out the XML API responses of all API queries to stdout.</p>"},{"location":"debugging/#debugging-all-in-one-monitoring-stack","title":"Debugging All-In-One Monitoring Stack","text":""},{"location":"debugging/#check-logs","title":"Check Logs","text":"<pre><code>cd ~/bbb-monitoring\nsudo docker-compose logs bbb-exporter\nsudo docker-compose logs prometheus\nsudo docker-compose logs grafana\nsudo docker-compose logs node_exporter\n\n# or skip the service name to view logs for all containers\nsudo docker-compose logs\n</code></pre>"},{"location":"debugging/#checking-if-prometheus-is-scraping-correctly","title":"Checking if Prometheus is Scraping Correctly","text":"<p>If you are not receiving any values in Grafana and the container logs do not give you any hints, it is a good idea to check if Prometheus is scraping any metrics.</p> <p>Since Prometheus is running on the host's network stack but binded to <code>127.0.0.1</code> we can use SSH to perform a local port forward.</p> <pre><code>ssh -NL 9090:127.0.0.1:9090 &lt;HOST&gt;\n</code></pre> <p>Now visit <code>http://localhost:9090</code> on your local machine and the Prometheus web  interface should appear. Under <code>Status</code> select <code>Targets</code>. Here the <code>bbb_node_exporter</code> target should be <code>up</code>.</p> <p>If the target is <code>down</code> then there is a scraping issue, if it is <code>up</code> then the  issue is on the Grafana -&gt; Prometheus side.</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#building-the-website","title":"Building the Website","text":""},{"location":"development/#requirements","title":"Requirements","text":"<ul> <li>make</li> <li>mkdocs</li> <li>mkdocs-material (pip install mkdocs-material)</li> </ul> <pre><code>pip install mkdocs mkdocs-material\nmake docs-dev\n</code></pre>"},{"location":"exporter-user-guide/","title":"Exporter User Guide","text":""},{"location":"exporter-user-guide/#environment-variables","title":"Environment Variables","text":"<ul> <li>API_SECRET - BigBlueButton API Secret<ul> <li>Required: true</li> <li>Use <code>$ bbb-conf --secret</code> on BigBlueButton server to get secret and Base API url</li> </ul> </li> <li>API_BASE_URL - BigBlueButton API base URL<ul> <li>Required: true</li> <li>Example: \"https://example.com/bigbluebutton/api/\"</li> <li>Trailing slash is required!</li> <li>Make sure you supply the base url of the API, often this URL ends in <code>/api/</code></li> </ul> </li> <li>DEBUG - Enable debug logging<ul> <li>Required: false</li> <li>Default: false</li> <li>Values: &lt;true | false&gt;</li> </ul> </li> <li>RECORDINGS_METRICS - Enable collection of recordings metrics <ul> <li>Required: false</li> <li>Default: true</li> <li>Values: &lt;true | false&gt;</li> </ul> </li> <li>BIND_IP - Which network address to bind the HTTP server of the exporter<ul> <li>Required: false</li> <li>Default: 0.0.0.0</li> </ul> </li> <li>PORT - HTTP port to serve the exporter metrics<ul> <li>Required: false</li> <li>Default: 9688</li> <li>Values: &lt;1 - 65535&gt;</li> </ul> </li> <li>TLS_VERIFY - Enable (default) / disable TLS CA verification or replace with a custom <code>CA_BUNDLE</code> directory or file<ul> <li>Required: false</li> <li>Default: true</li> <li>Values: &lt;true | false | path to CA_BUNDLE directory or file &gt; </li> <li>A <code>CA_BUNDLE</code> file is normal file that contains a list of CA certificates you trust.   See FAQ or the under the hood    library documentation for details.</li> </ul> </li> </ul>"},{"location":"exporter-user-guide/#optimizations","title":"Optimizations","text":"<ul> <li>RECORDINGS_METRICS_READ_FROM_DISK - Collect expensive recordings metrics by querying the disk instead of the API. This can substantially decrease the scrape time required for the exporter to respond to metrics requests.<ul> <li>Required: false</li> <li>Default: false</li> <li>Values: &lt;true | false&gt;</li> <li>Prerequisites: access to <code>/var/bigbluebutton</code> (for Docker containers do a read-only bind mount) so running the exporter remotely with this option is not possible (unless you setup a remote file mount).</li> <li>The metric <code>bbb_recordings_unprocessed</code> relies on the optimization to be turned on since the information is not  exposed via the BigBlueButton XML API</li> </ul> </li> </ul>"},{"location":"exporter-user-guide/#metric-histogram-custom-buckets","title":"Metric Histogram Custom Buckets","text":"<ul> <li> <p>ROOM_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the <code>bbb_room_participants_bucket</code> histogram metric</p> <ul> <li>Required: false</li> <li>Default: <code>0,1,5,15,30,60,90,120,150,200,250,300,400,500</code></li> <li><code>INF</code> will be added automatically as the final bucket size</li> <li>Values: list of integers separated using comma (<code>,</code>)</li> </ul> </li> <li> <p>ROOM_LISTENERS_CUSTOM_BUCKETS - Custom bucket sizes for the <code>bbb_room_listeners_bucket</code> histogram metric</p> <ul> <li>Required: false</li> <li>Default: <code>0,1,5,15,30,60,90,120,150,200,250,300,400,500</code></li> <li><code>INF</code> will be added automatically as the final bucket size</li> <li>Values: list of integers separated using comma (<code>,</code>)</li> </ul> </li> <li>ROOM_VOICE_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the <code>bbb_room_voice_participants_bucket</code> histogram  metric<ul> <li>Required: false</li> <li>Default: <code>0,1,5,15,30,60,90,120</code></li> <li><code>INF</code> will be added automatically as the final bucket size</li> <li>Values: list of integers separated using comma (<code>,</code>)</li> </ul> </li> <li>ROOM_VIDEO_PARTICIPANTS_CUSTOM_BUCKETS - Custom bucket sizes for the <code>bbb_room_video_participants_bucket</code> histogram  metric<ul> <li>Required: false</li> <li>Default: <code>0,1,5,15,30,60,90,120</code></li> <li><code>INF</code> will be added automatically as the final bucket size</li> <li>Values: list of integers separated using comma (<code>,</code>)</li> </ul> </li> </ul>"},{"location":"exporter-user-guide/#metrics","title":"Metrics","text":""},{"location":"exporter-user-guide/#gauges","title":"Gauges","text":"<ul> <li>bbb_meetings_participants - Total number of participants in all BigBlueButton meetings</li> <li>bbb_meetings_listeners - Total number of listeners in all BigBlueButton meetings</li> <li>bbb_meetings_voice_participants - Total number of voice participants in all BigBlueButton meetings</li> <li>bbb_meetings_video_participants - Total number of video participants in all BigBlueButton meetings</li> <li>bbb_meetings_participant_clients(type=&lt;client&gt;) - Total number of participants in all BigBlueButton meetings by    client (html5|dial-in|flash)</li> <li> <p>bbb_meetings_participants_origin(name=&lt;origin&gt;, server=&lt;servername&gt;) - Total number of participants in all    BigBlueButton meetings by server name and origin metadata (v0.6.0+)</p> <p>Hint</p> <p>bbb_meetings_participants_origin is useful when using multiple Greenlight instances with a single  BigBlueButton server, or adding custom bbb-origin-server-name or bbb-origin metadata tags in your BigBlueButton application. See PR #65 for details.</p> </li> <li> <p>bbb_recordings_processing - Total number of BigBlueButton recordings processing</p> </li> <li>bbb_recordings_published - Total number of BigBlueButton recordings published</li> <li>bbb_recordings_unpublished - Total number of BigBlueButton recordings unpublished</li> <li>bbb_recordings_deleted - Total number of BigBlueButton recordings deleted</li> <li>bbb_recordings_unprocessed - Total number of BigBlueButton recordings that are enqueued to be processed, requires for  the exporter to be installed on the BigBlueButton server (access to <code>/var/bigbluebutton/</code> dir) and for  <code>RECORDINGS_METRICS_READ_FROM_DISK</code> to be enabled</li> <li>bbb_api_up - 1 if BigBlueButton API is responding 0 otherwise</li> <li>bbb_exporter(labels: version) - Information about the exporter (i.e. version)</li> </ul>"},{"location":"exporter-user-guide/#histograms","title":"Histograms","text":"<ul> <li>bbb_api_latency(labels: endpoint, parameters) - BigBlueButton API call latency<ul> <li>buckets: .01, .025, .05, .075, .1, .25, .5, .75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 5.0, 7.5, 10.0, INF</li> </ul> </li> <li>bbb_room_participants_bucket - Number of rooms with participants less than or equal to the bucket size<ul> <li>buckets: 0, 1, 5, 15, 30, 60, 90, 120, 150, 200, 250, 300, 400, 500, INF</li> <li>bucket sizes can be overridden using <code>ROOM_PARTICIPANTS_CUSTOM_BUCKETS</code>, see  environment variables - metric-histogram-custom-buckets for details</li> </ul> </li> <li>bbb_room_listeners_bucket - Number of rooms with listeners less than or equal to the bucket size<ul> <li>buckets: 0, 1, 5, 15, 30, 60, 90, 120, 150, 200, 250, 300, 400, 500, INF</li> <li>bucket sizes can be overridden using <code>ROOM_LISTENERS_CUSTOM_BUCKETS</code>, see  environment variables - metric-histogram-custom-buckets for details</li> </ul> </li> <li>bbb_room_voice_participants_bucket - Number of rooms with voice participants less than or equal to the bucket size<ul> <li>buckets: 0, 1, 5, 15, 30, 60, 90, 120, INF</li> <li>bucket sizes can be overridden using <code>ROOM_VOICE_PARTICIPANTS_CUSTOM_BUCKETS</code>, see  environment variables - metric-histogram-custom-buckets for details</li> </ul> </li> <li>bbb_room_video_participants_bucket - Number of rooms with video participants less than or equal to the bucket size<ul> <li>buckets: 0, 1, 5, 15, 30, 60, 90, 120, INF</li> <li>bucket sizes can be overridden using <code>ROOM_VIDEO_PARTICIPANTS_CUSTOM_BUCKETS</code>, see  environment variables - metric-histogram-custom-buckets for details</li> </ul> </li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#scalelite-support","title":"Scalelite Support","text":"<p>BigBlueButton Exporter can be used alongside Scalelite. In fact the exporter doesn't need to know anything about Scalelite (or  Scalelite about the exporter) since the exporter still needs to be configured to scrape metrics from the BigBlueButton server's API. See comment in Issue #31.</p>"},{"location":"faq/#my-ca_bundle-for-the-tls_verify-environment-variable-is-not-working","title":"My <code>CA_BUNDLE</code> for the <code>TLS_VERIFY</code> environment variable is not working","text":"<p>If you will specify the directory flavor, make sure the directory is filled with public keys of  your trusted CA in PEM format.</p> <p>If you will specify the file flavor (e.g. <code>TLS_VERIFY=/app/CA_BUNDLE.txt</code>), make sure the file contains an appended  list of all your trusted PEM formatted CA's.  Non-working example to denote the format:</p> <pre><code>-----BEGIN CERTIFICATE-----\n... // PEM formated CA\n-----END CERTIFICATE-----\n\n-----BEGIN CERTIFICATE-----\n... // PEM formated CA\n-----END CERTIFICATE-----\n\n-----BEGIN CERTIFICATE-----\n... // PEM formated CA\n-----END CERTIFICATE-----\n</code></pre>"},{"location":"faq/#all-in-one-monitoring-stack-brokenpipeerror","title":"All in One Monitoring Stack BrokenPipeError","text":"<p>If you get a <code>BrokenPipeError</code> exception similar to:</p> <pre><code>bbb-exporter | ----------------------------------------\nbbb-exporter | 2020-07-09 01:38:25,635 [INFO]: Collecting metrics from BigBlueButton API\nbbb-exporter | 2020-07-09 01:38:32,497 [INFO]: Finished collecting metrics from BigBlueButton API\nbbb-exporter | ----------------------------------------\nbbb-exporter | Exception happened during processing of request from ('127.0.0.1', 48190)\nbbb-exporter | Traceback (most recent call last):\nbbb-exporter | File \"/usr/local/lib/python3.7/socketserver.py\", line 650, in process_request_thread\nbbb-exporter | self.finish_request(request, client_address)\nbbb-exporter | File \"/usr/local/lib/python3.7/socketserver.py\", line 360, in finish_request\nbbb-exporter | self.RequestHandlerClass(request, client_address, self)\nbbb-exporter | File \"/usr/local/lib/python3.7/socketserver.py\", line 720, in init\nbbb-exporter | self.handle()\nbbb-exporter | File \"/usr/local/lib/python3.7/http/server.py\", line 426, in handle\nbbb-exporter | self.handle_one_request()\nbbb-exporter | File \"/usr/local/lib/python3.7/http/server.py\", line 414, in handle_one_request\nbbb-exporter | method()\nbbb-exporter | File \"/usr/local/lib/python3.7/site-packages/prometheus_client/exposition.py\", line 159, in do_GET\nbbb-exporter | self.wfile.write(output)\nbbb-exporter | File \"/usr/local/lib/python3.7/socketserver.py\", line 799, in write\nbbb-exporter | self._sock.sendall(b)\nbbb-exporter | BrokenPipeError: [Errno 32] Broken pipe\n</code></pre> <p>This is caused by Prometheus closing the metrics scrapping HTTP request to the exporter because the request duration  exceeds the Prometheus defined <code>scrape_timeout</code> value. The Prometheus config (<code>prometheus.yaml</code>) file bundled with the All in One Monitoring Stack has the default <code>scrape_timeout</code> set to 15 seconds. The recommended way of fixing this is to enable the RECORDINGS_METRICS_READ_FROM_DISK  optimization which should dramatically reduce scraping times.</p> <p>You could also override the scrape_timeout value  for the bbb_exporter job but this should be only done in cases where enabling the <code>RECORDINGS_METRICS_READ_FROM_DISK</code> optimization is unfeasible.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>First you will need to choose your installation configuration.</p>"},{"location":"getting-started/#installation-type-matrix","title":"Installation Type Matrix","text":"Recommended installation type Number of BBB servers Existing Prometheus &amp; Grafana services Do you like Docker? Docker installation (recommended) multiple \u2705 \u2705 All-In-One Monitoring Stack installation 1 \u274c \u2705 Systemd installation (not recommended) multiple \u2705 \u274c <p>If you choose the Docker or Systemd installation type you will have the choice of choosing between node_exporter  (recommended) and Netdata for server resource utilization metrics. The metrics that will be collected from one of these two tools will be used together with BigBlueButton exporter metrics in the Server Instance Grafana dashboards.</p> <p>node_exporter installation instructions</p> <p>Netdata installation instructions</p>"},{"location":"getting-started/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Once you have the BigBlueButton exporter installed and one of the two resource utilization metric exporters (node_exporter or Netdata), you can import the appropriate Grafana dashboards.</p> <p>Note</p> <p>We assume a working Grafana-Prometheus installation. If you used the All-In-One Monitoring Stack installation type you are covered since Grafana, Prometheus and node_exporter come preconfigured. </p> <p>Login to Grafana and in the left menu click on + icon -&gt; import</p> <p>In the JSON field copy/paste the contents of your desired dashboard</p> Dashboard Prerequisites Short description All Servers dashboard BigBlueButton Exporter BBB metrics for all servers in one dashboard Server Instance (node_exporter) dashboard BigBlueButton Exporter, node_exporter BBB server details combined with node_exporter resource metrics Server Instance (netdata) dashboard BigBlueButton Exporter, Netdata BBB server details combined with Netdata resource metrics"},{"location":"getting-started/#installing-grafana-on-the-bigbluebutton-server","title":"Installing Grafana on the BigBlueButton Server","text":"<p>If you plan to install Grafana on the BigBlueButton host itself,  keep in mind that the standard port for Grafana (3000) is also used by the html5-client of BigBlueButton  (see <code>/etc/bigbluebutton/nginx/bbb-html5.nginx</code>). In this case you will need to change the Grafana port in <code>/etc/grafana/grafana.ini</code> to something else, e.g. 3001).</p>"},{"location":"support/","title":"Support","text":"<ol> <li>Read Installation instructions and the Getting Started guide</li> <li>Check the debugging instructions</li> <li>Check the FAQ</li> <li>Open an issue on the project's GitHub repository</li> </ol>"},{"location":"installation/all_in_one_monitoring_stack/","title":"All-In-One Monitoring Stack","text":"<p>If you do not have any monitoring infrastructure setup you can following these instructions to setup the entire  monitoring stack on your BigBlueButton server.</p> <p>Monitoring Stack:</p> <ul> <li>BigBlueButton exporter</li> <li>Prometheus (incl. node_exporter)</li> <li>Grafana</li> </ul> <p>Grafana will be exposed through the system installed Nginx which will act as a TLS termination proxy.</p> <p>Prerequisites:</p> <ul> <li>Docker (you probably have this on your BigBlueButton server)</li> <li>docker-compose (recent version with compose file format version 3.2 support)</li> <li>Nginx (that has TLS configured)</li> </ul> <p>Warning</p> <p>Follow Docker's official installation instructions instead of  installing docker-compose from Ubuntu's official repository since it is outdated and does not support compose file  format v3.2 (as of April 29, 2020).</p>"},{"location":"installation/all_in_one_monitoring_stack/#step-by-step-guide","title":"Step-by-step Guide","text":""},{"location":"installation/all_in_one_monitoring_stack/#1-create-directory","title":"1. Create directory","text":"<pre><code>mkdir ~/bbb-monitoring\n</code></pre>"},{"location":"installation/all_in_one_monitoring_stack/#2-copy-configuration-files","title":"2. Copy configuration files","text":"<p>Copy all the files in extras/all_in_one_monitoring  to your server into <code>~/bbb-monitoring</code></p> <p>And replace all the references to <code>example.com</code> with your BigBlueButton domain.</p> <p>Make sure to replace the exporters Docker image tag to the latest release.</p> <p>If you are not running on your BigBlueButton server, then you will need to disable the  <code>RECORDINGS_METRICS_READ_FROM_DISK</code> optimization by removing it from the docker-compose file and the <code>/var/bigbluebutton</code> volume bind mount. This will have the unfortunate consequence of dramatically increasing scrape times when your BigBlueButton server will have many recordings. It is also smart to increase the <code>scrape_timeout</code> value when disabling the optimization, see  All in One Monitoring Stack BrokenPipeError for details.</p> <p>Tip</p> <p>Docker best practice: pin your docker image to a specific tag to have a reproducible environment. This also makes it easier to check which version you are running and which is the latest release.</p> <p>Note</p> <p>You will configure <code>https://example.com/monitoring</code> in step 5: Configure Nginx.</p>"},{"location":"installation/all_in_one_monitoring_stack/#3-add-your-secrets","title":"3. Add your secrets","text":"<p>Get your BBB secret by running:</p> <pre><code>bbb-conf --secret\n</code></pre> <p>Then fill out <code>API_BASE_URL</code> and <code>API_SECRET</code> in <code>~/bbb-monitoring/bbb_exporter_secrets.env</code> with your details.</p> <p>Warning</p> <p>The API base url ends with <code>/api/</code> (beware of the trailing slash!). <code>bbb-conf --secret</code> will return the base url but not the base API url which has a <code>/api/</code> appended.</p>"},{"location":"installation/all_in_one_monitoring_stack/#4-start-the-services","title":"4. Start the services","text":"<pre><code>cd ~/bbb-monitoring\nsudo docker-compose up -d\n</code></pre>"},{"location":"installation/all_in_one_monitoring_stack/#5-configure-nginx","title":"5. Configure Nginx","text":"<p>Add a location directive to your Nginx web server. To prevent the additional location directive from being deleted on Nginx upgrades, create a new file in: <code>/etc/bigbluebutton/nginx/monitoring.nginx</code>. Add the following location directive to the file:</p> <pre><code># BigBlueButton monitoring\nlocation /monitoring/ {\n  proxy_pass http://127.0.0.1:3001/;\n  include proxy_params;\n}\n</code></pre> <p>Note</p> <p>If you would like to change the URL you will need to update the docker-compose grafana <code>GF_SERVER_ROOT_URL</code> env  variable as well.</p> <p>Tip</p> <p>When upgrading BigBlueButton, the upgrade procedure will not overwrite the contents of <code>/etc/bigbluebutton/nginx/</code>folder. </p> <p>You could also add a separate site configuration, but this will require you to point another domain to the server to do virtual hosting and acquire a separate HTTPS certificate.</p>"},{"location":"installation/all_in_one_monitoring_stack/#6-setup-grafana","title":"6. Setup Grafana","text":"<p>Login to Grafana (https://example.com/monitoring) in your web browser (admin:admin) and change the password.</p> <p>Add Prometheus as a data source (Add data source -&gt; Prometheus) and entering the following configuration:</p> <pre><code>URL: http://localhost:9090\n</code></pre> <p>Note</p> <p>The <code>prometheus</code> DNS entry will be resolved by Docker since Grafana is running within the same Docker network (our docker-compose configuration automates this).</p> <p>Now it is time to finally import the fancy dashboards. In the left menu click on + icon -&gt; import</p> <p>In the JSON field copy/paste the contents of extras/dashboards/server_instance_node_exporter.json  Grafana dashboard.</p> <p>You are done \ud83d\udc4f\ud83d\udc4f!</p> <p>Warning</p> <p>You can edit your dashboard as much as you like, but note that you will lose your changes if you will re-import updated  versions of the dashboard.  So you will have to manually patch the dashboard when we update the dashboard json files in the repository.</p>"},{"location":"installation/all_in_one_monitoring_stack/#updates","title":"Updates","text":"<p>Follow Installation of BigBlueButton Exporter -&gt; Updates but instead of  <code>cd ~/bbb-exporter</code> you will have to <code>cd ~/bbb-monitoring</code>.</p> <p>Check the releases for the rest of the services (Prometheus, Grafana &amp; node_exporter) on their respected websites for  details on the latest Docker image release tag.</p>"},{"location":"installation/bigbluebutton_exporter/","title":"Installation of BigBlueButton Exporter","text":"<p>Two installation methods are supported:</p> <ul> <li>Docker (recommended)</li> <li>Systemd (not recommended)</li> </ul> <p>We recommend Docker because it is easier to update, reproduce builds and comes with all dependencies pre-installed.</p>"},{"location":"installation/bigbluebutton_exporter/#docker-installation-recommended","title":"Docker Installation (Recommended)","text":"<p>These instructions will guide you through the installation procedure for BigBlueButton Exporter on your BigBlueButton server  and direct the HTTP basic auth protected endpoint <code>/metrics/</code> to expose your BigBlueButtons server's metrics. We assume you have a working installation of BigBlueButton with Nginx as the reverse proxy already set up.</p> <p>Info</p> <p>HTTP Basic Auth is required because each request to the <code>/metrics/</code> endpoint performs an API call to BigBlueButton  which takes a couple of seconds. </p> <p>Prerequisite:</p> <ul> <li>Prometheus</li> <li>Docker</li> <li>docker-compose</li> <li>Working BigBlueButton server</li> </ul> <p>Warning</p> <p>Follow Docker's official installation instructions instead of  installing docker-compose from Ubuntu's official repository since it is outdated and does not support compose file  format v3.2 (as of April 29, 2020).</p>"},{"location":"installation/bigbluebutton_exporter/#1-create-directory","title":"1. Create directory","text":"<pre><code>mkdir ~/bbb-exporter\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#2-create-docker-compose-file","title":"2. Create docker-compose file","text":"<p>Copy extras/docker-compose.exporter.yaml  to your BigBlueButton server into <code>~/bbb-exporter/docker-compose.yaml</code>. Make sure to replace the Docker image tag to the latest release.</p> <p>Note</p> <p>We assume you will be running the exporter on the BigBlueButton server where you have access to the recordings directory (<code>/var/bigbluebutton</code>). We need access to this directory so we can efficiently compute the metrics for recordings.</p> <p>You can still run the exporter on a different host by disabling the optimization but will lose certain metrics  and increase scrape times. </p> <p>See details regarding the optimization. </p> <p>Tip</p> <p>Docker best practice: pin your docker image to a specific tag to have a reproducible environment. This also makes it easier to check which version you are running and which is the latest release.</p>"},{"location":"installation/bigbluebutton_exporter/#3-create-secrets-file","title":"3. Create secrets file","text":"<p>Take a note of your BigBlueButton's API base url and secret by running:</p> <pre><code>bbb-conf --secret\n</code></pre> <p>Then create the file <code>~/bbb-exporter/secrets.env</code> and fill out the <code>API_BASE_URL</code> and <code>API_SECRET</code> variables with your details.</p> <pre><code>API_BASE_URL=https://example.com/bigbluebutton/api/\nAPI_SECRET=&lt;secret&gt;\n</code></pre> <p>Warning</p> <p>The API base url ends with <code>/api/</code> (beware of the trailing slash!). <code>bbb-conf --secret</code> will return the base url but not the base API url which has a <code>/api/</code> appended.</p>"},{"location":"installation/bigbluebutton_exporter/#4-start-the-container","title":"4. Start the container","text":"<pre><code>sudo docker-compose up -d\n</code></pre> <p>The exporter should be running now. However you will not be able to access it externally because the docker-compose file binded the exporters port only to localhost. This is because we will use Nginx to act as a TLS termination proxy (reverse proxy with HTTPS support)  </p>"},{"location":"installation/bigbluebutton_exporter/#5-create-http-basic-auth-password","title":"5. Create HTTP basic auth password","text":"<p>Info</p> <p>For this you will need the handy <code>apache2-utils</code> package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: <code>sudo apt-get install apache2-utils</code>.</p> <p>Create a username (e.g. metrics) and password. You will be prompted after you run the <code>htpasswd</code> command for the desired password.</p> <pre><code># You may replace metrics with any desired username\nsudo htpasswd -c /etc/nginx/.htpasswd metrics\n</code></pre> <p>Warning</p> <p>If you already have <code>/etc/nginx/.htpasswd</code> file then do not add the <code>-c</code> flag, otherwise you will overwrite the file.</p>"},{"location":"installation/bigbluebutton_exporter/#6-add-nginx-site-configuration","title":"6. Add Nginx site configuration","text":"<p>Add a location directive to your Nginx web server. To prevent the additional location directive from being deleted on Nginx upgrades, create a new file in: <code>/etc/bigbluebutton/nginx/monitoring.nginx</code>. Add the following location directive to the file:</p> <pre><code># BigBlueButton Exporter (metrics)\nlocation /metrics/ {\n    auth_basic \"BigBlueButton Exporter\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://127.0.0.1:9688/;\n    include proxy_params;\n}\n</code></pre> <p>Tip</p> <p>You could also add a separate site configuration, but this will require you to point another domain to the server, configure virtual hosting and acquire a separate HTTPS certificate.</p>"},{"location":"installation/bigbluebutton_exporter/#7-reload-nginx-and-test","title":"7. Reload Nginx and test","text":"<p>First check if your Nginx configuration is syntactically valid:</p> <pre><code>sudo nginx -t\n</code></pre> <p>If everything is okay reload Nginx:</p> <pre><code>sudo systemctl reload nginx\n</code></pre> <p>Now you can try accessing the metrics on <code>/metrics</code> and typing in your username/password that you choose in  5. Create HTTP basic auth password</p> <p>You should get the raw metrics in the Prometheus format.</p>"},{"location":"installation/bigbluebutton_exporter/#8-add-the-exporter-to-your-prometheus-configuration","title":"8. Add the exporter to your Prometheus configuration","text":"<p>Now all that is left is to point your Prometheus to the exporter.</p> <p>In your <code>prometheus.yaml</code> configuration add a new job specifying the target (url of the exporter) and HTTP basic auth credentials. Replace <code>example.com</code> with your BigBlueButton's domain.</p> <pre><code>- job_name: 'bbb'\n  scrape_interval: 5s\n  scheme: https\n  basic_auth:\n    username: \"&lt;HTTP BASIC AUTH USERNAME&gt;\"\n    password: \"&lt;HTTP BASIC AUTH PASSWORD&gt;\"\n  static_configs:\n  - targets: ['example.com']\n</code></pre> <p>Tip</p> <p>You can scrape multiple exporters using a single job rule if they all have the same HTTP basic auth username/password in the Nginx termination proxy. See Multiple BigBlueButton Servers for details.</p>"},{"location":"installation/bigbluebutton_exporter/#updates","title":"Updates","text":"<p>To update your BigBlueButton exporter all you have to do is change the docker image tag to the latest release  (see releases or  Docker image tags)  in <code>~/bbb-exporter/docker-compose.yaml</code> and re-create the docker container by running:</p> <pre><code>cd ~/bbb-exporter\ndocker-compose up -d\n</code></pre> <p>Since the container doesn't store anything it is safe to destroy the container.</p> <p>We recommend you \"watch\" on GitHub the projects repository to be notified on new releases. This way you will be always notified when a new update for BigBlueButton Exporter is available.</p>"},{"location":"installation/bigbluebutton_exporter/#systemd-installation-not-recommended","title":"Systemd Installation (Not recommended)","text":"<p>This is an alternative installation guide that does not require docker and installs the exporter as a Systemd unit.</p> <p>After the guide you will have:</p> <ul> <li>BigBlueButton Exporter installed system wide and you will be able to use systemctl to start/stop/restart the exporter</li> <li>Nginx as a TLS termination proxy for the exporter</li> </ul> <p>Installation should be on the BigBlueButton server, although it is possible to install it on a secondary machine, but  this will require you to install Nginx and set it up by yourself.</p>"},{"location":"installation/bigbluebutton_exporter/#1-install-python-3-pip","title":"1. Install Python 3 pip","text":"<pre><code>sudo apt install python3-pip\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#2-download-the-source-code-and-install-dependencies","title":"2. Download the source code and install dependencies","text":"<pre><code>cd /opt\nsudo git clone https://github.com/greenstatic/bigbluebutton-exporter.git\ncd bigbluebutton-exporter/\n# It is recommended to checkout a release tag instead of using the master branch.\n# We recommend selecting the latest release tag from:\n# https://github.com/greenstatic/bigbluebutton-exporter/releases\nsudo git checkout &lt;RELEASE TAG&gt;\nsudo pip3 install -r requirements.txt  # will install the Python dependencies system-wide\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#3-create-a-non-privileged-user-for-the-exporter","title":"3. Create a non-privileged user for the exporter","text":"<pre><code>sudo useradd -r -d /opt/bigbluebutton-exporter -s /usr/sbin/nologin bbb-exporter\nsudo chown -R bbb-exporter:bbb-exporter /opt/bigbluebutton-exporter\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#4-copy-systemd-unit-service-and-example-settings","title":"4. Copy Systemd unit service and example settings","text":"<pre><code>sudo cp /opt/bigbluebutton-exporter/extras/systemd/bigbluebutton-exporter.service /lib/systemd/system/\nsudo mkdir /etc/bigbluebutton-exporter\nsudo cp /opt/bigbluebutton-exporter/extras/systemd/bigbluebutton-exporter/* /etc/bigbluebutton-exporter\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#5-edit-settings-and-replace-api_base_url-and-api_secret","title":"5. Edit settings and replace <code>API_BASE_URL</code> and <code>API_SECRET</code>","text":"<pre><code>sudo nano /etc/bigbluebutton-exporter/settings.env # or using Vim\nsudo vim /etc/bigbluebutton-exporter/settings.env </code></pre>"},{"location":"installation/bigbluebutton_exporter/#6-start-the-bigbluebutton-exporter-service","title":"6. Start the bigbluebutton-exporter service","text":"<pre><code>sudo systemctl start bigbluebutton-exporter\n# optional - enable exporter to autostart when booting host\nsudo systemctl enable bigbluebutton-exporter\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#7-setup-nginx-as-a-tls-termination-proxy","title":"7. Setup Nginx as a TLS termination proxy","text":"<p>Follow steps 5 - 7 from the Docker installation instructions.</p>"},{"location":"installation/bigbluebutton_exporter/#8-configure-prometheus","title":"8. Configure Prometheus","text":"<p>Follow step 8 from the Docker installation instructions.</p>"},{"location":"installation/bigbluebutton_exporter/#updates_1","title":"Updates","text":"<p>To update the exporter all you need to do is issue a:</p> <pre><code>cd /opt/bigbluebutton-exporter\nsudo git pull\nsudo git checkout &lt;RELEASE TAG&gt;\nsudo chown -R bbb-exporter:bbb-exporter /opt/bigbluebutton-exporter\nsudo systemctl restart bigbluebutton-exporter\n</code></pre> <p>Check the repository releases to get the latest tag. It is recommended to watch the repository to be alerted when there is a new release available.</p>"},{"location":"installation/bigbluebutton_exporter/#notes","title":"Notes","text":""},{"location":"installation/bigbluebutton_exporter/#multiple-bigbluebutton-servers","title":"Multiple BigBlueButton Servers","text":"<p>There are two ways of configuring Prometheus to scrape multiple BigBlueButton exporters, the primary difference between the two is that one supports having different HTTP Basic Auth usernames/passwords for each exporter and the other doesn't.</p>"},{"location":"installation/bigbluebutton_exporter/#1-extending-prometheus-targets-recommended","title":"1. Extending Prometheus targets (Recommended)","text":"<p>Pro:</p> <ul> <li>Simple configuration</li> <li>Dashboards work out of the box</li> </ul> <p>Cons:</p> <ul> <li>All BigBlueButton exporters must have the same HTTP Basic Auth username/password</li> </ul>"},{"location":"installation/bigbluebutton_exporter/#configuration-steps","title":"Configuration steps","text":"<ol> <li>Configure a single BigBlueButton exporter Prometheus scrape job</li> <li>Configure the same HTTP Basic Auth username/password on all your Nginx TLS termination proxies  (that act as a reverse proxy for your BigBlueButton exporter)</li> <li>Append all the hosts to the Prometheus' <code>targets</code> field</li> </ol> <p>Example scrape job, place this under <code>scrape_configs</code> in your Prometheus configuration:</p> <pre><code>- job_name: 'bbb_node_exporter'\nmetrics_path: '/node_exporter/metrics'\nparams:\nformat: [prometheus]\nhonor_labels: true\nscheme: https\nbasic_auth:\nusername: &lt;HTTP BASIC AUTH USERNAME&gt;  # TODO - change\npassword: &lt;HTTP BASIC AUTH PASSWORD&gt;  # TODO - change\nstatic_configs:\n# TODO - change, add all of your BigBlueButton exporter hosts\n- targets: ['bbb.example.com', 'bbb2.example.com', 'bbb3.example.com']\n</code></pre>"},{"location":"installation/bigbluebutton_exporter/#2-separate-job-not-recommended","title":"2. Separate job (Not recommended)","text":"<p>Pro:</p> <ul> <li>All BigBlueButton exporters can have different HTTP Basic Auth usernames/passwords</li> </ul> <p>Cons:</p> <ul> <li>More to configure</li> </ul> <p>Warning</p> <p>This has not been tested and some changes to the provided Grafana dashboards might be required (in the future)!</p>"},{"location":"installation/bigbluebutton_exporter/#configuration-steps_1","title":"Configuration steps","text":"<ol> <li>For each BigBlueButton exporter create a separate Prometheus scrape job </li> <li>Check to see if your Grafana dashboards are displaying all metrics correctly</li> </ol> <p>Here is an example of two job scrape configuration (for two different exporters).  Place this under <code>scrape_configs</code> in your Prometheus configuration for each job (exporter):</p> <pre><code># TODO - change job_name, this has to be different for each job\n- job_name: 'bbb_node_exporter_1'\nmetrics_path: '/node_exporter/metrics'\nparams:\nformat: [prometheus]\nhonor_labels: true\nscheme: https\nbasic_auth:\nusername: &lt;HTTP BASIC AUTH USERNAME&gt;  # TODO - change\npassword: &lt;HTTP BASIC AUTH PASSWORD&gt;  # TODO - change\nstatic_configs:\n- targets: ['bbb.example.com']  # TODO - change\n\n# TODO - change job_name, this has to be different for each job\n- job_name: 'bbb_node_exporter_2'\nmetrics_path: '/node_exporter/metrics'\nparams:\nformat: [prometheus]\nhonor_labels: true\nscheme: https\nbasic_auth:\nusername: &lt;HTTP BASIC AUTH USERNAME&gt;  # TODO - change\npassword: &lt;HTTP BASIC AUTH PASSWORD&gt;  # TODO - change\nstatic_configs:\n- targets: ['bbb2.example.com']  # TODO - change\n</code></pre>"},{"location":"installation/netdata/","title":"Netdata","text":"<p>Follow these instructions in order to view system resource utilization with the <code>server_instace_netdata.yaml</code> Grafana dashboard.</p> <p>Instructions bellow will configure Netdata to bind to localhost and configure Nginx as a reverse proxy that will expose  Netdata via a location directive with HTTP basic auth.</p>"},{"location":"installation/netdata/#step-by-step-guide","title":"Step-by-step Guide","text":"<p>This guide is built upon https://docs.netdata.cloud/backends/prometheus/.</p>"},{"location":"installation/netdata/#1-install-netdata","title":"1. Install Netdata","text":"<p>Follow Netdata's official instruction on how to install Netdata:  https://docs.netdata.cloud/packaging/installer/.</p>"},{"location":"installation/netdata/#2-configure-netdata-to-bind-to-localhost","title":"2. Configure Netdata to bind to localhost","text":"<p>Find the <code>[web]</code> section and make sure <code>bind to = 127.0.0.1</code>.</p> <pre><code>cd /etc/netdata\nsudo ./edit-config netdata.conf\n</code></pre>"},{"location":"installation/netdata/#3-create-http-basic-auth-password","title":"3. Create HTTP basic auth password","text":"<p>Info</p> <p>For this you will need the handy <code>apache2-utils</code> package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: <code>sudo apt install apache2-utils</code>.</p> <p>Create a username (e.g. monitoring) and password. You will be prompted after you run the <code>htpasswd</code> command for the desired password.</p> <p>Tip</p> <p>The username and password combo doesn't need to be the same as the one for the exporter.</p> <pre><code># You may replace monitoring with any desired username\n# add `-c` flag to create the file if it doesn't exist\nsudo htpasswd /etc/nginx/.htpasswd monitoring\n</code></pre>"},{"location":"installation/netdata/#4-add-nginx-site-configuration","title":"4. Add Nginx site configuration","text":"<p>Add the location directive to your Nginx web server (<code>/etc/nginx/sites-available/bigbluebutton</code>) that will proxy traffic to <code>127.0.0.1:19999</code>.</p> <pre><code># Netdata metrics\nlocation /netdata/ {\n    auth_basic \"Netdata Monitoring\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://127.0.0.1:19999/;\n    include proxy_params;\n}\n</code></pre>"},{"location":"installation/netdata/#5-add-netdata-to-your-prometheus-scrape-jobs","title":"5. Add Netdata to your Prometheus scrape jobs","text":"<p>Add the following job to your Prometheus configuration. Replace <code>example.com</code> with your BigBlueButton's domain.</p> <pre><code>- job_name: 'bbb_netdata'\nmetrics_path: '/netdata/api/v1/allmetrics'\nparams:\nformat: [prometheus]\nhonor_labels: true\nscheme: https\nbasic_auth:\nusername: \"&lt;HTTP BASIC AUTH USERNAME&gt;\"\npassword: \"&lt;HTTP BASIC AUTH PASSWORD&gt;\"\nstatic_configs:\n- targets: ['example.com']\n</code></pre>"},{"location":"installation/netdata/#6-import-the-dashboard-to-your-grafana","title":"6. Import the dashboard to your Grafana","text":"<p>Log into your Grafana web interface, click on <code>+</code> -&gt; <code>Import</code> and select <code>Upload .json file</code>. Select the file <code>extras/dashboards/server_instance_netdata.json</code> from the repository (clone the repository or copy the  contents of the file).</p>"},{"location":"installation/netdata/#notes","title":"Notes","text":""},{"location":"installation/netdata/#multiple-bigbluebutton-servers","title":"Multiple BigBlueButton servers","text":"<p>If you wish to monitor multiple BigBlueButton servers simply do steps 1-4 for each server and then add each server's  domain to the <code>targets</code> field in Prometheuses <code>bbb_netdata</code> job configuration.</p>"},{"location":"installation/netdata/#setup-netdata-without-the-nginx-reverse-proxy","title":"Setup Netdata without the Nginx reverse proxy","text":"<p>In the case you do not wish to deploy your Netdata behind the Nginx reverse proxy, you either need to fix the  Server Instance Grafana Dashboard (not recommended) or add a Prometheus relabel config.</p> <p>Thank you to @robbi5 for providing this snippet:</p> <pre><code>relabel_configs:\n- source_labels: ['__address__']\nseparator:     ':'\nregex:         '(.*):.*'\ntarget_label:  'instance'\nreplacement:   '$1'\n</code></pre> <p>See issue #3 for more details.</p>"},{"location":"installation/node_exporter/","title":"node_exporter","text":"<p>Follow these instructions in order to view system resource utilization with the  <code>extras/dashboards/server_instace_node_exporter.json</code> Grafana dashboard.</p> <p>Instructions bellow will configure node_exporter to bind to localhost and configure Nginx as a reverse proxy that will expose  node_exporter via a location directive with HTTP basic auth.</p>"},{"location":"installation/node_exporter/#step-by-step-guide","title":"Step-by-step Guide","text":"<p><code>node_exporter</code> should be installed on your BigBlueButton server in order to expose system metrics for your Grafan  dashboards.</p>"},{"location":"installation/node_exporter/#1-copy-extrasnode_exporter","title":"1. Copy <code>extras/node_exporter</code>","text":"<pre><code>git clone https://github.com/greenstatic/bigbluebutton-exporter.git\ncp -r bigbluebutton-exporter/extras/node_exporter ~/\n</code></pre> <p>Tip</p> <p>Always check for the latest stable docker image tag (for the <code>docker-compose.yaml</code> file). </p>"},{"location":"installation/node_exporter/#2-start-using-docker-compose","title":"2. Start using docker-compose","text":"<pre><code>cd ~/node_exporter\nsudo docker-compose up -d\n</code></pre>"},{"location":"installation/node_exporter/#3-create-http-basic-auth-password","title":"3. Create HTTP basic auth password","text":"<p>Info</p> <p>For this you will need the handy <code>apache2-utils</code> package to create a password that will be used with HTTP basic auth by Nginx. You can install it (on Ubuntu) by running: <code>sudo apt install apache2-utils</code>.</p> <p>Create a username (e.g. monitoring) and password. You will be prompted after you run the <code>htpasswd</code> command for the desired password.</p> <p>Tip</p> <p>The username and password combo doesn't need to be the same as the one for the exporter.</p> <pre><code># You may replace monitoring with any desired username\n# add `-c` flag to create the file if it doesn't exist\nsudo htpasswd /etc/nginx/.htpasswd monitoring\n</code></pre>"},{"location":"installation/node_exporter/#4-add-nginx-site-configuration","title":"4. Add Nginx site configuration","text":"<p>Add the location directive to your Nginx web server (<code>/etc/nginx/sites-available/bigbluebutton</code>) that will proxy traffic to <code>127.0.0.1:9100</code>.</p> <pre><code># node_exporter metrics\nlocation /node_exporter/ {\n    auth_basic \"node_exporter\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://127.0.0.1:9100/;\n    include proxy_params;\n}\n</code></pre>"},{"location":"installation/node_exporter/#5-add-node_exporter-to-your-prometheus-scrape-jobs","title":"5. Add node_exporter to your Prometheus scrape jobs","text":"<p>Add the following job to your Prometheus configuration. Replace <code>example.com</code> with your BigBlueButton's domain.</p> <pre><code>- job_name: 'bbb_node_exporter'\nmetrics_path: '/node_exporter/metrics'\nparams:\nformat: [prometheus]\nhonor_labels: true\nscheme: https\nbasic_auth:\nusername: \"&lt;HTTP BASIC AUTH USERNAME&gt;\"\npassword: \"&lt;HTTP BASIC AUTH PASSWORD&gt;\"\nstatic_configs:\n- targets: ['example.com']\n</code></pre>"},{"location":"installation/node_exporter/#6-import-the-dashboard-to-your-grafana","title":"6. Import the dashboard to your Grafana","text":"<p>Log into your Grafana web interface, click on <code>+</code> -&gt; <code>Import</code> and select <code>Upload .json file</code>. Select the file <code>extras/dashboards/server_instance_node_exporter.json</code> from the repository (clone the repository or  copy the contents of the file).</p>"},{"location":"installation/node_exporter/#notes","title":"Notes","text":""},{"location":"installation/node_exporter/#multiple-bigbluebutton-servers","title":"Multiple BigBlueButton servers","text":"<p>If you wish to monitor multiple BigBlueButton servers simply do steps 1-4 for each server and then add each server's  domain to the <code>targets</code> field in Prometheuses <code>bbb_node_exporter</code> job configuration.</p>"}]}